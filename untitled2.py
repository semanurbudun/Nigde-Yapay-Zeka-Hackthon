# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nHm1r_s3D-vTDyzYbxOchJIkYZw1qgO2
"""

# Packages
import pandas as pd
import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
from sklearn.metrics import silhouette_samples, silhouette_score
from sklearn.preprocessing import MinMaxScaler
from sklearn.cluster import KMeans
import matplotlib.cm as cm
from matplotlib import pyplot
from sklearn import datasets, linear_model
from sklearn.linear_model import LogisticRegression

df = pd.read_csv("data.csv")
df

df = df.dropna(axis=0, how='all')

df = df.dropna(axis=1, how='all')

df

data_encoded.head()

from sklearn.preprocessing import LabelEncoder, MinMaxScaler, OneHotEncoder
le = LabelEncoder()
data_encoded["CINSIYET"] = le.fit_transform(data_encoded["CINSIYET"])
data_encoded["EGITIM_SEVIYESI"] = le.fit_transform(data_encoded["EGITIM_SEVIYESI"])

data_encoded.head()

from sklearn.preprocessing import OneHotEncoder

# One-Hot Encoding için OneHotEncoder nesnesini oluşturun
ohe = OneHotEncoder()

# Birden fazla kategorik sütunu seçin ve One-Hot Encoding uygulayın
categorical_columns = ["UYRUK","ILCE", "ONCEKI_MESLEK", "MEDENI_DURUM"]
encoded_data = ohe.fit_transform(df[categorical_columns])

# One-Hot Encoding ile oluşturulan sütunları veri setine ekleyin
encoded_columns = ohe.get_feature_names_out(categorical_columns)
data_encoded = pd.concat([df, pd.DataFrame(encoded_data.toarray(), columns=encoded_columns)], axis=1)

# One-Hot Encoding yapılan sütunları ve orijinal kategorik sütunları veri setinden kaldırın
data_encoded.drop(categorical_columns, axis=1, inplace=True)

# Sonuçları gösterin
print(data_encoded.head())

data_encoded.head()

data_encoded.columns

# Korelasyon matrisini oluşturun
correlation_matrix = data_encoded[cols].corr()

# Seçilecek yüksek korelasyona sahip özelliklerin eşik değeri
threshold = 0.5

# Korelasyon matrisindeki özellikler arasında döngü yapın
selected_features = set()
for i in range(len(correlation_matrix.columns)):
    for j in range(i):
        if abs(correlation_matrix.iloc[i, j]) > threshold:
            colname = correlation_matrix.columns[i]
            selected_features.add(colname)

# Seçilen yüksek korelasyona sahip özellikleri yazdırın
print("Seçilen yüksek korelasyona sahip özellikler:")
print(selected_features)

cols = ['UYRUK_AFGANİSTAN', 'UYRUK_AMERIKA', 'UYRUK_BULGARISTAN', 'UYRUK_CIN',
       'UYRUK_INGILTERE', 'UYRUK_IRAN', 'UYRUK_JAPONYA', 'UYRUK_NIJERYA',
       'UYRUK_RUSYA', 'UYRUK_SURIYE', 'ILCE_BAGCILAR', 'ILCE_BESIKTAS',
       'ILCE_CEKMEKOY', 'ILCE_ESENLER', 'ILCE_EYUPSULTAN', 'ILCE_GUNGOREN',
       'ILCE_KADIKOY', 'ILCE_KUCUKCEKMECE', 'ILCE_SULTANBEYLI',
       'ILCE_UMRANIYE', 'ILCE_USKUDAR', 'ONCEKI_MESLEK_ASCI',
       'ONCEKI_MESLEK_BAHCIVAN', 'ONCEKI_MESLEK_BAKKAL', 'ONCEKI_MESLEK_CIFCI',
       'ONCEKI_MESLEK_DOKTOR', 'ONCEKI_MESLEK_EMLAKCI', 'ONCEKI_MESLEK_ESNAF',
       'ONCEKI_MESLEK_EV HANIMI', 'ONCEKI_MESLEK_EV_HANIMI',
       'ONCEKI_MESLEK_GARSON', 'ONCEKI_MESLEK_HEMSIRE',
       'ONCEKI_MESLEK_INSAAT_USTASI', 'ONCEKI_MESLEK_ISCI',
       'ONCEKI_MESLEK_ISSIZ', 'ONCEKI_MESLEK_KASIYER', 'ONCEKI_MESLEK_MANAV',
       'ONCEKI_MESLEK_MUHASEBECI', 'ONCEKI_MESLEK_MUHASEBECİ',
       'ONCEKI_MESLEK_OGRENCI', 'ONCEKI_MESLEK_OGRETMEN',
       'ONCEKI_MESLEK_PROFESOR', 'ONCEKI_MESLEK_TAKSI_SOFORU',
       'ONCEKI_MESLEK_TERZI', 'ONCEKI_MESLEK_ÖĞRENCİ', 'MEDENI_DURUM_BEKAR',
       'MEDENI_DURUM_BOSANMIS', 'MEDENI_DURUM_EVLI', 'GELIR', 'CALISAN_SAYISI',
       'YAS', 'CINSIYET', 'EGITIM_SEVIYESI', 'EBEVEYN_SAYISI', 'AILE_KISI_SAYISI',
       'A_SABIKA_KAYDI', 'PSIKIYATRI_KAYDI', 'SABIKA_KAYDI',
       'MADDE_BAGIMLILIGI', 'TEROR']
X = data_encoded[cols]
y = data_encoded['SUC_TESPITI']

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Veri setini bağımsız değişkenler (X) ve bağımlı değişken (y) olarak ayırın
X = data_encoded[cols]
y = data_encoded['SUC_TESPITI']

# Veri setini eğitim ve test setlerine ayırın
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Lojistik regresyon modelini oluşturun
log_reg_model = LogisticRegression()

# Modeli eğitin
log_reg_model.fit(X_train, y_train)

# Eğitim veri seti üzerinde tahmin yapın
train_predictions = log_reg_model.predict(X_train)

# Test veri seti üzerinde tahmin yapın
test_predictions = log_reg_model.predict(X_test)

# Eğitim ve test doğruluk skorlarını hesaplayın
train_accuracy = accuracy_score(y_train, train_predictions)
test_accuracy = accuracy_score(y_test, test_predictions)

print("Eğitim doğruluk skoru:", train_accuracy)
print("Test doğruluk skoru:", test_accuracy)

from sklearn.ensemble import RandomForestClassifier

# Random Forest sınıflandırıcı modelini oluşturma
random_forest = RandomForestClassifier(n_estimators=100, random_state=42)

# Modeli eğitme
random_forest.fit(X_train, y_train)

# Eğitim veri seti üzerinde tahmin yapma
train_predictions = random_forest.predict(X_train)

# Test veri seti üzerinde tahmin yapma
test_predictions = random_forest.predict(X_test)

# Eğitim ve test doğruluğunu değerlendirme
train_accuracy = accuracy_score(y_train, train_predictions)
test_accuracy = accuracy_score(y_test, test_predictions)

print("Eğitim doğruluğu:", train_accuracy)
print("Test doğruluğu:", test_accuracy)

from sklearn.svm import SVC

# SVM sınıflandırıcı modelini oluşturma
svm_classifier = SVC(kernel='linear', random_state=42, probability=True)

# Modeli eğitme
svm_classifier.fit(X_train, y_train)

# Eğitim veri seti üzerinde tahmin yapma
train_predictions = svm_classifier.predict(X_train)

# Test veri seti üzerinde tahmin yapma
test_predictions = svm_classifier.predict(X_test)

# Eğitim ve test doğruluğunu değerlendirme
train_accuracy = accuracy_score(y_train, train_predictions)
test_accuracy = accuracy_score(y_test, test_predictions)

print("Eğitim doğruluğu:", train_accuracy)
print("Test doğruluğu:", test_accuracy)

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Decision Tree modelini oluşturma
decision_tree = DecisionTreeClassifier(random_state=42)

# Modeli eğitme
decision_tree.fit(X_train, y_train)

# Eğitim veri seti üzerinde tahmin yapma
train_predictions = decision_tree.predict(X_train)

# Test veri seti üzerinde tahmin yapma
test_predictions = decision_tree.predict(X_test)

# Eğitim ve test doğruluğunu değerlendirme
train_accuracy = accuracy_score(y_train, train_predictions)
test_accuracy = accuracy_score(y_test, test_predictions)

print("Eğitim doğruluğu:", train_accuracy)
print("Test doğruluğu:", test_accuracy)

import pandas as pd

# Tek satırlık veriyi oluşturun
single_data = pd.DataFrame({
    'UYRUK_AFGANİSTAN': [0],
    'UYRUK_AMERIKA': [1],
    'UYRUK_BULGARISTAN': [0],
    'UYRUK_CIN': [0],
    'UYRUK_INGILTERE': [0],
    'UYRUK_IRAN': [0],
    'UYRUK_JAPONYA': [0],
    'UYRUK_NIJERYA': [0],
    'UYRUK_RUSYA': [0],
    'UYRUK_SURIYE': [0],
    'ILCE_BAGCILAR': [0],
    'ILCE_BESIKTAS': [0],
    'ILCE_CEKMEKOY': [0],
    'ILCE_ESENLER': [0],
    'ILCE_EYUPSULTAN': [0],
    'ILCE_GUNGOREN': [0],
    'ILCE_KADIKOY': [1],
    'ILCE_KUCUKCEKMECE': [0],
    'ILCE_SULTANBEYLI': [0],
    'ILCE_UMRANIYE': [0],
    'ILCE_USKUDAR': [0],
    'ONCEKI_MESLEK_ASCI': [0],
    'ONCEKI_MESLEK_BAHCIVAN': [0],
    'ONCEKI_MESLEK_BAKKAL': [0],
    'ONCEKI_MESLEK_CIFCI': [0],
    'ONCEKI_MESLEK_DOKTOR': [0],
    'ONCEKI_MESLEK_EMLAKCI': [0],
    'ONCEKI_MESLEK_ESNAF': [0],
    'ONCEKI_MESLEK_EV HANIMI': [1],
    'ONCEKI_MESLEK_EV_HANIMI': [0],
    'ONCEKI_MESLEK_GARSON': [0],
    'ONCEKI_MESLEK_HEMSIRE': [0],
    'ONCEKI_MESLEK_INSAAT_USTASI': [0],
    'ONCEKI_MESLEK_ISCI': [0],
    'ONCEKI_MESLEK_ISSIZ': [0],
    'ONCEKI_MESLEK_KASIYER': [0],
    'ONCEKI_MESLEK_MANAV': [0],
    'ONCEKI_MESLEK_MUHASEBECI': [0],
    'ONCEKI_MESLEK_MUHASEBECİ': [0],
    'ONCEKI_MESLEK_OGRENCI': [0],
    'ONCEKI_MESLEK_OGRETMEN': [0],
    'ONCEKI_MESLEK_PROFESOR': [0],
    'ONCEKI_MESLEK_TAKSI_SOFORU': [0],
    'ONCEKI_MESLEK_TERZI': [0],
    'ONCEKI_MESLEK_ÖĞRENCİ': [0],
    'MEDENI_DURUM_BEKAR': [0],
    'MEDENI_DURUM_BOSANMIS': [0],
    'MEDENI_DURUM_EVLI': [1],
    'GELIR': [34500],
    'CALISAN_SAYISI': [2],
    'YAS': [5],
    'CINSIYET': [1],  # Örneğin erkek için 1, kadın için 0
    'EGITIM_SEVIYESI': [6],  # Örneğin üniversite mezunu için 3
    'EBEVEYN_SAYISI': [1],
    'AILE_KISI_SAYISI': [3],
    'A_SABIKA_KAYDI': [0],
    'PSIKIYATRI_KAYDI': [0],
    'SABIKA_KAYDI': [0],
    'MADDE_BAGIMLILIGI': [0],
    'TEROR': [0]
})

# Modelin tahminlerini yapın
prediction = svm_classifier.predict(single_data)

print("Tahmin:", prediction)

# model adında bir sınıflandırıcı modeliniz varsa
olasiliklar = svm_classifier.predict_proba(X_test)

# İlk örneğin olasılıklarını alalım
ilk_ornek_olasiliklar = olasiliklar[0]
ikinci_ornek_olasiliklar = olasiliklar[1]

# İlk örneğin iki sınıf arasındaki olasılıklarını yazdıralım
print("Sınıf 0 için olasılık:", ilk_ornek_olasiliklar[0])
print("Sınıf 1 için olasılık:", ilk_ornek_olasiliklar[1])

print("Sınıf 0 için olasılık:", ikinci_ornek_olasiliklar[0])
print("Sınıf 1 için olasılık:", ikinci_ornek_olasiliklar[1])

# Test veri seti üzerinde sınıf olasılıklarını alın
olasiliklar = svm_classifier.predict_proba(X_test)

# Tüm örnekler için sınıf olasılıklarını döngüyle alın
for i, olasiliklar in enumerate(olasiliklar):
    print(f"Örnek {i+1} için sınıf olasılıkları:")
    for j, olasilik in enumerate(olasiliklar):
        print(f"Sınıf {j} için olasılık: {olasilik}")
    print()

from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error

# SVR regresyon modelini oluşturma
svr_regressor = SVR(kernel='linear')

# Modeli eğitme
svr_regressor.fit(X_train, y_train)

# Eğitim veri seti üzerinde tahmin yapma
train_predictions = svr_regressor.predict(X_train)

# Test veri seti üzerinde tahmin yapma
test_predictions = svr_regressor.predict(X_test)

# Eğitim ve test hata değerlerini hesaplama
train_error = mean_squared_error(y_train, train_predictions)
test_error = mean_squared_error(y_test, test_predictions)

print("Eğitim hatası:", train_error)
print("Test hatası:", test_error)

importance = svm_classifier.coef_[0]

veri1 = pd.DataFrame({
    'UYRUK_AFGANİSTAN': [0],
    'UYRUK_AMERIKA': [1],
    'UYRUK_BULGARISTAN': [0],
    'UYRUK_CIN': [0],
    'UYRUK_INGILTERE': [0],
    'UYRUK_IRAN': [0],
    'UYRUK_JAPONYA': [0],
    'UYRUK_NIJERYA': [0],
    'UYRUK_RUSYA': [0],
    'UYRUK_SURIYE': [0],
    'ILCE_BAGCILAR': [0],
    'ILCE_BESIKTAS': [0],
    'ILCE_CEKMEKOY': [0],
    'ILCE_ESENLER': [0],
    'ILCE_EYUPSULTAN': [0],
    'ILCE_GUNGOREN': [0],
    'ILCE_KADIKOY': [1],
    'ILCE_KUCUKCEKMECE': [0],
    'ILCE_SULTANBEYLI': [0],
    'ILCE_UMRANIYE': [0],
    'ILCE_USKUDAR': [0],
    'ONCEKI_MESLEK_ASCI': [0],
    'ONCEKI_MESLEK_BAHCIVAN': [0],
    'ONCEKI_MESLEK_BAKKAL': [0],
    'ONCEKI_MESLEK_CIFCI': [0],
    'ONCEKI_MESLEK_DOKTOR': [0],
    'ONCEKI_MESLEK_EMLAKCI': [0],
    'ONCEKI_MESLEK_ESNAF': [0],
    'ONCEKI_MESLEK_EV HANIMI': [1],
    'ONCEKI_MESLEK_EV_HANIMI': [0],
    'ONCEKI_MESLEK_GARSON': [0],
    'ONCEKI_MESLEK_HEMSIRE': [0],
    'ONCEKI_MESLEK_INSAAT_USTASI': [0],
    'ONCEKI_MESLEK_ISCI': [0],
    'ONCEKI_MESLEK_ISSIZ': [0],
    'ONCEKI_MESLEK_KASIYER': [0],
    'ONCEKI_MESLEK_MANAV': [0],
    'ONCEKI_MESLEK_MUHASEBECI': [0],
    'ONCEKI_MESLEK_MUHASEBECİ': [0],
    'ONCEKI_MESLEK_OGRENCI': [0],
    'ONCEKI_MESLEK_OGRETMEN': [0],
    'ONCEKI_MESLEK_PROFESOR': [0],
    'ONCEKI_MESLEK_TAKSI_SOFORU': [0],
    'ONCEKI_MESLEK_TERZI': [0],
    'ONCEKI_MESLEK_ÖĞRENCİ': [0],
    'MEDENI_DURUM_BEKAR': [0],
    'MEDENI_DURUM_BOSANMIS': [0],
    'MEDENI_DURUM_EVLI': [1],
    'GELIR': [34500],
    'CALISAN_SAYISI': [2],
    'YAS': [5],
    'CINSIYET': [1],  # Örneğin erkek için 1, kadın için 0
    'EGITIM_SEVIYESI': [6],  # Örneğin üniversite mezunu için 3
    'EBEVEYN_SAYISI': [1],
    'AILE_KISI_SAYISI': [3],
    'A_SABIKA_KAYDI': [0],
    'PSIKIYATRI_KAYDI': [0],
    'SABIKA_KAYDI': [0],
    'MADDE_BAGIMLILIGI': [0],
    'TEROR': [0]
})

veri2 = pd.DataFrame({
    'UYRUK_AFGANİSTAN': [0],
    'UYRUK_AMERIKA': [1],
    'UYRUK_BULGARISTAN': [0],
    'UYRUK_CIN': [0],
    'UYRUK_INGILTERE': [0],
    'UYRUK_IRAN': [0],
    'UYRUK_JAPONYA': [0],
    'UYRUK_NIJERYA': [0],
    'UYRUK_RUSYA': [0],
    'UYRUK_SURIYE': [0],
    'ILCE_BAGCILAR': [0],
    'ILCE_BESIKTAS': [0],
    'ILCE_CEKMEKOY': [0],
    'ILCE_ESENLER': [0],
    'ILCE_EYUPSULTAN': [0],
    'ILCE_GUNGOREN': [0],
    'ILCE_KADIKOY': [1],
    'ILCE_KUCUKCEKMECE': [0],
    'ILCE_SULTANBEYLI': [0],
    'ILCE_UMRANIYE': [0],
    'ILCE_USKUDAR': [0],
    'ONCEKI_MESLEK_ASCI': [0],
    'ONCEKI_MESLEK_BAHCIVAN': [0],
    'ONCEKI_MESLEK_BAKKAL': [0],
    'ONCEKI_MESLEK_CIFCI': [0],
    'ONCEKI_MESLEK_DOKTOR': [0],
    'ONCEKI_MESLEK_EMLAKCI': [0],
    'ONCEKI_MESLEK_ESNAF': [0],
    'ONCEKI_MESLEK_EV HANIMI': [1],
    'ONCEKI_MESLEK_EV_HANIMI': [0],
    'ONCEKI_MESLEK_GARSON': [0],
    'ONCEKI_MESLEK_HEMSIRE': [0],
    'ONCEKI_MESLEK_INSAAT_USTASI': [0],
    'ONCEKI_MESLEK_ISCI': [0],
    'ONCEKI_MESLEK_ISSIZ': [0],
    'ONCEKI_MESLEK_KASIYER': [0],
    'ONCEKI_MESLEK_MANAV': [0],
    'ONCEKI_MESLEK_MUHASEBECI': [0],
    'ONCEKI_MESLEK_MUHASEBECİ': [0],
    'ONCEKI_MESLEK_OGRENCI': [0],
    'ONCEKI_MESLEK_OGRETMEN': [0],
    'ONCEKI_MESLEK_PROFESOR': [0],
    'ONCEKI_MESLEK_TAKSI_SOFORU': [0],
    'ONCEKI_MESLEK_TERZI': [0],
    'ONCEKI_MESLEK_ÖĞRENCİ': [0],
    'MEDENI_DURUM_BEKAR': [0],
    'MEDENI_DURUM_BOSANMIS': [0],
    'MEDENI_DURUM_EVLI': [1],
    'GELIR': [34500],
    'CALISAN_SAYISI': [2],
    'YAS': [5],
    'CINSIYET': [1],  # Örneğin erkek için 1, kadın için 0
    'EGITIM_SEVIYESI': [6],  # Örneğin üniversite mezunu için 3
    'EBEVEYN_SAYISI': [1],
    'AILE_KISI_SAYISI': [3],
    'A_SABIKA_KAYDI': [0],
    'PSIKIYATRI_KAYDI': [0],
    'SABIKA_KAYDI': [0],
    'MADDE_BAGIMLILIGI': [0],
    'TEROR': [0]
})

veri3 = pd.DataFrame({
    'UYRUK_AFGANİSTAN': [0],
    'UYRUK_AMERIKA': [1],
    'UYRUK_BULGARISTAN': [0],
    'UYRUK_CIN': [0],
    'UYRUK_INGILTERE': [0],
    'UYRUK_IRAN': [0],
    'UYRUK_JAPONYA': [0],
    'UYRUK_NIJERYA': [0],
    'UYRUK_RUSYA': [0],
    'UYRUK_SURIYE': [0],
    'ILCE_BAGCILAR': [0],
    'ILCE_BESIKTAS': [0],
    'ILCE_CEKMEKOY': [0],
    'ILCE_ESENLER': [0],
    'ILCE_EYUPSULTAN': [0],
    'ILCE_GUNGOREN': [0],
    'ILCE_KADIKOY': [1],
    'ILCE_KUCUKCEKMECE': [0],
    'ILCE_SULTANBEYLI': [0],
    'ILCE_UMRANIYE': [0],
    'ILCE_USKUDAR': [0],
    'ONCEKI_MESLEK_ASCI': [0],
    'ONCEKI_MESLEK_BAHCIVAN': [0],
    'ONCEKI_MESLEK_BAKKAL': [0],
    'ONCEKI_MESLEK_CIFCI': [0],
    'ONCEKI_MESLEK_DOKTOR': [0],
    'ONCEKI_MESLEK_EMLAKCI': [0],
    'ONCEKI_MESLEK_ESNAF': [0],
    'ONCEKI_MESLEK_EV HANIMI': [1],
    'ONCEKI_MESLEK_EV_HANIMI': [0],
    'ONCEKI_MESLEK_GARSON': [0],
    'ONCEKI_MESLEK_HEMSIRE': [0],
    'ONCEKI_MESLEK_INSAAT_USTASI': [0],
    'ONCEKI_MESLEK_ISCI': [0],
    'ONCEKI_MESLEK_ISSIZ': [0],
    'ONCEKI_MESLEK_KASIYER': [0],
    'ONCEKI_MESLEK_MANAV': [0],
    'ONCEKI_MESLEK_MUHASEBECI': [0],
    'ONCEKI_MESLEK_MUHASEBECİ': [0],
    'ONCEKI_MESLEK_OGRENCI': [0],
    'ONCEKI_MESLEK_OGRETMEN': [0],
    'ONCEKI_MESLEK_PROFESOR': [0],
    'ONCEKI_MESLEK_TAKSI_SOFORU': [0],
    'ONCEKI_MESLEK_TERZI': [0],
    'ONCEKI_MESLEK_ÖĞRENCİ': [0],
    'MEDENI_DURUM_BEKAR': [0],
    'MEDENI_DURUM_BOSANMIS': [0],
    'MEDENI_DURUM_EVLI': [1],
    'GELIR': [34500],
    'CALISAN_SAYISI': [2],
    'YAS': [5],
    'CINSIYET': [1],  # Örneğin erkek için 1, kadın için 0
    'EGITIM_SEVIYESI': [6],  # Örneğin üniversite mezunu için 3
    'EBEVEYN_SAYISI': [1],
    'AILE_KISI_SAYISI': [3],
    'A_SABIKA_KAYDI': [0],
    'PSIKIYATRI_KAYDI': [0],
    'SABIKA_KAYDI': [0],
    'MADDE_BAGIMLILIGI': [0],
    'TEROR': [0]
})

sample_data = [[veri1, veri2, veri3]]

predictions = []

for data in sample_data:
    prediction = svm_classifier.predict_proba(data)
    predictions.append(prediction)

# predictions listesini kullanarak işlemlerinizi yapabilirsiniz